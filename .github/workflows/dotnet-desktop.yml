name: Build, Test, and Publish NuGet Package

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      NEW_VERSION: ${{ steps.increment_version.outputs.NEW_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Extract base version from .csproj
        id: extract_version
        run: |
          BASE_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" ./Eplicta.Mets/*.csproj)
          echo "Base version is $BASE_VERSION"
          echo "##[set-output name=BASE_VERSION;]$BASE_VERSION"

      - name: Increment version based on GitHub run number
        id: increment_version
        run: |
          BASE_VERSION="${{ steps.extract_version.outputs.BASE_VERSION }}"
          BUILD_INCREMENT=${{ github.run_number }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + BUILD_INCREMENT))"
          echo "New version is $NEW_VERSION"
          echo "##[set-output name=NEW_VERSION;]$NEW_VERSION"

      - name: Update project files with new version
        run: |
          NEW_VERSION="${{ steps.increment_version.outputs.NEW_VERSION }}"
          find . -name "*.csproj" -exec sed -i "s|<Version>.*</Version>|<Version>${NEW_VERSION}</Version>|g" {} +

      - name: Build the solution
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.increment_version.outputs.NEW_VERSION }}

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Pack NuGet package with new version
        run: |
          echo "Pack version is ${{ needs.build.outputs.NEW_VERSION }}"
          dotnet pack --configuration Release -o ./artifacts /p:PackageVersion=${{ needs.build.outputs.NEW_VERSION }}

      - name: Publish NuGet package
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push ./artifacts/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json

      - name: Tag the repository with the new version
        env:
          VERSION: ${{ needs.build.outputs.NEW_VERSION }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${VERSION}" -m "NuGet package version ${VERSION}"
          git push origin "v${VERSION}"
